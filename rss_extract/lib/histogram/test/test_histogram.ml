open OUnit2

let test_counts = [
(0, [("\x63\x68\x72\x69\x73\x74\x69\x61\x6e\x69\x74\x79", 1800);("\x69\x6e", 9761);("\x74\x68\x69\x73", 4822);("\x6f\x66", 14108);("\x77\x65", 4773);("\x63\x6f\x6e\x74\x69\x6e\x75\x65", 213);("\x6f\x75\x72", 4039);("\x6c\x69\x66\x65", 1469);("\x61\x6e\x64", 22209);("\x6c\x65\x61\x72\x6e", 718);("\x74\x68\x61\x74", 5243);("\x69\x73", 7563);("\x77\x69\x74\x68\x6f\x75\x74", 221);("\x6d\x75\x73\x74", 136);("\x61", 12943);("\x6f\x77\x6e", 692);("\x73\x6f", 1720);("\x64\x6f", 1633);("\x75\x73", 3099);("\x77\x68\x65\x6e", 1687);("\x66\x72\x6f\x6d", 2906)]);
(2, [("\x62\x79", 491);("\x69\x73", 1285);("\x74\x68\x65", 6284);("\x77\x68\x79", 127);("\x77\x69\x6c\x6c", 597);("\x74\x6f", 2658);("\x63\x65\x6e\x74\x72\x61\x6c", 306);("\x61\x6e\x64", 4254);("\x79\x6f\x75", 519);("\x68\x61\x76\x65", 190);("\x6d\x69\x6b\x65", 174);("\x6f\x66", 2911);("\x68\x6f\x73\x74", 383);("\x74\x61\x6c\x6b", 688);("\x61\x62\x6f\x75\x74", 554);("\x69\x6e", 2399);("\x68\x6f\x77", 306);("\x6f\x6e", 2257);("\x6e\x65\x77", 135);("\x63\x61\x6e", 228);("\x79\x6f\x75\x72", 388)]);
(4, [("\x74\x68\x65", 537);("\x61", 388);("\x61\x6e\x64", 358);("\x69\x6e", 250);("\x2d", 695);("\xd8\xb1\xd8\xa7", 377);("\xd9\x88", 848);("\xd8\xaf\xd8\xb1", 1170);("\x6f\x66", 359);("\xd8\xa8\xd9\x87", 720);("\x77\x69\x74\x68", 111);("\xd8\xa8\xd8\xa7", 256);("\x66\x72\x6f\x6d", 121);("\xda\xaf\xd8\xb2\xd8\xa7\xd8\xb1\xd8\xb4", 114);("\xd9\x85\xd8\xa7", 114);("\xd8\xa7\xd9\x81\xd8\xba\xd8\xa7\xd9\x86\xd8\xb3\xd8\xaa\xd8\xa7\xd9\x86", 127);("\x6e\x65\x77", 152);("\xd8\xa7\xd8\xb2", 603);("\x74\x6f", 266);("\xd8\xa7\xd8\xb3\xd8\xaa", 133);("\x6f\x6e", 314)]);
(5, [("\x70\x65\x72\x73\x6f\x6e\x61\x6c\x20\x6a\x6f\x75\x72\x6e\x61\x6c\x73", 245);("\x6d\x79", 1428);("\x73\x75\x70\x70\x6f\x72\x74\x65\x72", 181);("\x6f\x66", 21481);("\x74\x68\x69\x73", 6850);("\x65\x70\x69\x73\x6f\x64\x65", 5430);("\x31", 355);("\x68\x69\x73\x74\x6f\x72\x79", 392);("\x6d\x65", 747);("\x61\x6e\x64", 30402);("\x6c\x69\x76\x69\x6e\x67", 326);("\x77\x69\x74\x68", 7956);("\x69\x6e", 14230);("\x65\x70\x69\x73\x6f\x64\x65\x2c", 636);("\x64\x72\x2e", 888);("\x69\x6e\x74\x65\x72\x76\x69\x65\x77\x73", 155);("\x66\x65\x6c\x6c\x6f\x77", 102);("\x69\x73", 8634);("\x66\x6f\x72\x6d\x65\x72", 252)]);
(6, [("\x6d\x75\x73\x69\x63", 176);("\x62\x79", 384);("\x6f\x66", 1607);("\x26", 419);("\x6d\x6f\x72\x65", 102);("\x69\x74", 265);("\x70\x6f\x64\x63\x61\x73\x74", 189);("\x74\x68\x65", 2786);("\x2d", 149);("\x74\x6f", 1687);("\x79\x6f\x75\x72", 126);("\x73\x68\x6f\x77", 192);("\x77\x69\x74\x68", 571);("\x79\x6f\x75", 295);("\x72\x61\x64\x69\x6f", 141);("\x6f\x6e", 1676);("\x6e\x65\x77", 262);("\x69\x6e", 1028);("\x65\x70\x69\x73\x6f\x64\x65", 836);("\x77\x68\x6f", 120);("\x69", 173)]);
(7, [("\x6d\x75\x73\x69\x63", 3789);("\x77\x65\x6c\x6c", 1212);("\x69", 5867);("\x68\x6f\x70\x65", 819);("\x79\x6f\x75\x72", 10286);("\x68\x61\x73", 2780);("\x75\x70", 3488);("\x73\x69\x6e\x63\x65", 370);("\x74\x68\x65", 74049);("\x6c\x61\x73\x74", 1288);("\x74\x69\x6d\x65", 2142);("\x79\x6f\x75", 15335);("\x77\x65\x72\x65", 752);("\x68\x65\x72\x65\x2e", 126);("\x69\x74\xe2\x80\x99\x73", 825);("\x6c\x6f\x6f\x6b\x69\x6e\x67", 407);("\x70\x72\x65\x74\x74\x79", 190);("\x77\x65\x6c\x63\x6f\x6d\x65", 779);("\x74\x6f", 39158);("\x61\x6c\x6c", 5362);("\x6e\x65\x77", 4770)]);
(8, [("\x74\x68\x65", 1280);("\x66\x72\x6f\x6d", 208);("\x6f\x66", 597);("\x73\x6b\x69\x69\x6e\x67", 134);("\x69\x6e", 372);("\x26", 112);("\x77\x68\x61\x74", 116);("\x61\x62\x6f\x75\x74", 244);("\x61", 566);("\x74\x6f", 883);("\x74\x68\x61\x74", 132);("\x74\x68\x69\x73", 193);("\x68\x65", 114);("\x75\x73", 105);("\x61\x6e\x64", 1024);("\x79\x6f\x75", 237);("\xe2\x80\x93", 170);("\x68\x6f\x77", 210);("\x73\x6b\x69", 434);("\x66\x6f\x72", 394)]);
(9, [("\x74\x68\x65", 144)]);
(10, [("\x70\x65\x72\x73\x6f\x6e\x61\x6c\x20\x6a\x6f\x75\x72\x6e\x61\x6c\x73", 234);("\xe2\x80\x93", 632);("\x69\x6e", 1100);("\x2d", 1374);("\x77\x69\x6c\x6c", 134);("\x74\x68\x65", 2934);("\x66\x6f\x72", 541);("\x61\x6c\x6c", 183);("\x6f\x66", 1465);("\x6f\x75\x72", 250);("\x62\x75\x74", 159);("\x69", 281);("\x61\x6d", 132);("\x61\x72\x65", 248);("\x79\x6f\x75\x72", 277);("\x6f\x72", 212);("\x26", 139);("\x61\x73", 383);("\x68\x61\x76\x65", 178);("\x74\x6f", 1429);("\x62\x65", 245)]);
(13, [("\x69\x73", 137);("\x61", 284);("\x69\x6e", 231);("\x74\x68\x65", 672);("\x6f\x66", 414);("\x61\x6e\x64", 536);("\x6f\x6e", 176);("\x74\x6f", 353);("\x79\x6f\x75", 104);("\x61\x62\x6f\x75\x74", 120);("\x74\x68\x69\x73", 127);("\x66\x6f\x72", 162);("\x68\x65\x72", 101);("\x2d", 108)]);
(15, [("\x65\x70\x69\x73\x6f\x64\x65", 1632);("\x61\x6e\x64", 6738);("\x74\x68\x65", 14691);("\x6f\x66", 4784);("\x61\x6e", 957);("\x61", 4783);("\x69\x6e", 3762);("\x68\x69\x73", 509);("\x69\x66", 169);("\x73\x68\x65", 129);("\x77\x69\x74\x68", 2106);("\x6f\x76\x65\x72", 311);("\x68\x65\x72", 289);("\x6c\x61\x73\x74", 144);("\x77\x69\x6c\x6c", 788);("\x77\x68\x6f", 329);("\x69\x73", 2246);("\x77\x68\x65\x6e", 163);("\x77\x68\x61\x74", 554);("\x74\x6f", 4927);("\x6f\x75\x74", 464)]);
(16, [("\x6d\x75\x73\x69\x63", 287);("\x74\x68\x65", 568);("\x61\x6e\x64", 159);("\x2d", 419);("\x70\x61\x74\x63\x68\x77\x65\x72\x6b", 112);("\x72\x65\x63\x6f\x72\x64\x69\x6e\x67", 103);("\x73\x74\x75\x64\x69\x6f\x73", 103);("\x77\x69\x74\x68", 155);("\x6f\x66", 196);("\x69\x6e", 180);("\x65\x70\x69\x73\x6f\x64\x65", 191);("\x74\x6f", 194);("\x26", 169);("\x68\x6f\x77", 115);("\x68\x69\x73", 138)]);
(17, [("\x61", 239);("\x74\x6f", 301);("\x61\x6e\x64", 114);("\x79\x6f\x75", 231);("\x69\x6e", 114);("\x74\x68\x65", 279);("\x6f\x66", 111)]);
(18, [("\x63\x68\x72\x69\x73\x74\x69\x61\x6e\x69\x74\x79", 193);("\x61\x6e\x64", 165);("\x6f\x66", 209);("\x69\x6e", 184);("\x74\x68\x65", 364);("\x74\x6f", 150);("\x2d", 226);("\x61\x75\x64\x69\x6f", 158);("\x75\x6e\x64", 274);("\x64\x65\x72", 159);("\x64\x69\x65", 175)]);
(19, [("\x63\x68\x72\x69\x73\x74\x69\x61\x6e\x69\x74\x79", 426);("\x69\x73", 237);("\x61", 404);("\x66\x6f\x72", 309);("\x6d\x6f\x72\x65", 266);("\x6f\x66", 367);("\x69\x6e", 311);("\x74\x68\x65", 764);("\x70\x61\x73\x74\x6f\x72", 211);("\x26", 137);("\x2d", 379);("\x74\x6f", 515);("\x69", 162);("\x61\x6e\x64", 463);("\x63\x68\x75\x72\x63\x68", 111);("\x79\x6f\x75", 132);("\x77\x69\x74\x68", 214);("\x6f\x6e", 393);("\x66\x72\x6f\x6d", 110);("\x62\x79", 154);("\x74\x68\x69\x73", 156)]);
]

let test_sums = [(0, 705623); (1, 1321); (2, 129561); (3, 392); (4, 47159); (5, 926708); (6, 73177); (7, 2202332); (8, 33018); (9, 2312); (10, 89386); (11, 21); (12, 108); (13, 15006); (14, 612); (15, 326067); (16, 10711); (17, 7680); (18, 12617); (19, 24666); (20, 91488); (21, 67381); (22, 87777); (23, 529); (24, 39184); (25, 889444); (26, 23638); (27, 1021532); (28, 1510); (29, 12101); (30, 20961); (31, 8578); (32, 1509); (33, 629); (34, 38939); (35, 127); (36, 5850); (37, 3125); (38, 12910); (39, 17945); (40, 45189); (41, 1959); (42, 6721); (43, 7723); (44, 2489); (45, 11609); (46, 883431); (47, 116486); (48, 3951997); (49, 568776); (50, 4884); (51, 1606); (52, 37133); (53, 17438); (54, 5812); (55, 751943); (56, 9716); (57, 2762318); (58, 184930); (59, 3849845); (60, 15); (61, 8309); (62, 2421); (63, 392); (64, 313417); (65, 35599); (66, 9093); (67, 10024); (68, 128859); (69, 1463); (70, 402937); (71, 9402); (72, 8789); (73, 247597); (74, 2576); (75, 5498); (76, 1392); (77, 7559); (78, 53815); (79, 619); (80, 3201); (81, 1351); (82, 37890); (83, 4735); (84, 5109); (85, 37933); (86, 32331); (87, 22940); (88, 222696); (89, 18173); (90, 24263); (91, 1563); (92, 46610); (93, 1872); (94, 2545); (95, 95329); (96, 67400); (97, 115585); (98, 3854); (99, 462374)]

let test_bin_fname = 
  let cwd = Sys.getcwd () in 
  let fname = Printf.sprintf "%s/token_dists.bin" cwd in 
  Re.replace_string (Re.Posix.compile_pat "_build/default/lib/histogram/test") ~by:"lib/histogram" fname

let test_hists = Histogram.load test_bin_fname

let test_test_counts _ =
  test_counts
  |> List.iter (fun pair ->
    let idx, vals = pair in
    let hist = Array.get test_hists idx in 
    vals
    |> List.iter (fun v ->
      let k, c = v in 
      let hc = Histogram.get hist k in 
      if c != hc then ((Printf.printf "%s %d %d\n" k c hc); print_newline ());
      assert_equal ~msg:"count is correct" c hc;
    )
  )

let test_test_sums _ =
  test_sums
  |> List.iter (fun pair ->
    let idx, c = pair in 
    let hist = Array.get test_hists idx in 
    let hc = Histogram.sum hist in
    assert_equal ~msg:"sum is correct" c hc;
  )

let suite = 
  "suite">::: [
    "counts">:: test_test_counts;
    "sums">:: test_test_sums
  ]

let () =
  run_test_tt_main suite